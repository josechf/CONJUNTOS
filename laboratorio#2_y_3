#include<stdio.h>
#include <stdbool.h>

int t=0;
struct conj
{
    char elementos[10];
}conjuntos[0];

void menu();
//conjuntos-------
void crear();
void insertar();
void operaciones();
int conj_universal(int);
void imprimir();
int cardinales();
void conj_potencia(int);
bool verificar(int,int);
void inicializar();
int repetido(int,int);
void uniones(int,int,int,int);
void disjunto(int,int,int,int);
void diferencia_sim(int,int,int,int);
void sub_conjunto(int,int,int,int);
//sucesiones ------------
void opcion();
void trabajar_sucesiones();
void crear_sucesion();
void impar();
void recursiva();
void terminos_sucesivos();
void ultimo_termino();
void imprimir_sucesion(int [],int,int);
//relaciones------------------
void relaciones();
void pedir_relaciones(int);
void cartesiano(int,int);
void matriz_adyacente(int,int);
void imprimir_relacion(int,int);

void main(){
    opcion();
}

void opcion(){
    int op=0;
    system("cls"); fflush(stdin);
    printf("    LABORATORIO");
    printf("\n  1: CONJUNTOS ");
    printf("\n  2: SUCESIONES ");
    printf("\n  3: RELACIONES ");
    printf("\n  4: FINALIZAR PROGRAMA \n");
    scanf("%d",&op);
        switch(op){
            case 1:{
                inicializar();
                menu();
                break;
            }
            case 2:{
                trabajar_sucesiones();
                break;
            }
            case 3:{
                relaciones();
            }
            case 4:{
                return;
            }
        }
    opcion();
}

void relaciones(){
    int ele=0;
    if(t==0){
        printf("\nPara esta operacion necesita al menos dos conjuntos\n");
        system("pause");system("cls");
        insertar();
        system("cls");
        crear();
    }
    system("cls");
    printf("          RELACIONES        ");
    printf("\n  1: PRODUCTO CARTESIANA");
    printf("\n  2: MATRIZ CARTESIANA");
    printf("\n  3: PROPIEDADES\n");
    scanf("%d",&ele);
    switch(ele){
        case 1:{
            pedir_relaciones(1);
            break;
        }
        case 2:{
            pedir_relaciones(2);
            break;
        }
        case 3:{
            printf("aun nada");
            break;
        }
    }
    relaciones();
}

void imprimir_relacion(int A,int B){
    int i=0;
    do{
      printf("\nCONJUNTOS %d:\n",A+1);
        for(i=1;i<sizeof(conjuntos[A].elementos);i++){
            if(conjuntos[A].elementos[i]!=0){
                printf(" %d: [%c]",i,conjuntos[A].elementos[i]);
            }else{
                if(B!=0){
                    A=B;
                    B=0;
                    break;
                }else{
                    A=0;
                    break;
                }
            }
        }
    }while(A!=0);printf("\n");
}

void pedir_relaciones(int funcion){
    int A=0,B=0,x=0;bool ve;
    imprimir();
    do{fflush(stdin);
        printf("ELIJA EL PRIMER CONJUNTO");
        x=scanf("%d",&A);A--;
        ve=verificar(x,A);
    }while(!ve);
    do{fflush(stdin);
        printf("ELIJA EL SEGUNDO CONJUNTO");
        x=scanf("%d",&B);B--;
        ve=verificar(x,B);
    }while(!ve);
    switch(funcion){
        case 1:{
            cartesiano(A,B);
            break;
        }
        case 2:{
            matriz_adyacente(A,B);
            break;
        }
        case 3:{
            printf("aun ndada");
            break;
        }
    }
}

void cartesiano(int A,int B){
    int x=0,ve=0;
    printf("\n\nEL PRODUCTO CARTESIANO DE: ");
    imprimir_relacion(A,B);
    printf("ES\n[ ");
    for(ve=1;ve<sizeof(conjuntos[A].elementos);ve++){
        if(conjuntos[A].elementos[ve]!=0){
            for(x=1;x<sizeof(conjuntos[B].elementos);x++){
                if(conjuntos[B].elementos[x]!=0){
                    printf("(%c,%c),",conjuntos[A].elementos[ve],conjuntos[B].elementos[x]);
                }else{
                    break;
                }
            }
        }else{
            break;
        }
    }
    printf(" ]\n");system("pause");
}

void matriz_adyacente(int A,int B){
    int x=0;bool ve;
    printf("\n\nMATRIZ CARTESIANA\n ");

    system("pause");
}

void trabajar_sucesiones(){
    int op=0;
    system("cls"); fflush(stdin);
    printf("1:FORMULAS RECURSIVAS");
    printf("\n2:TERMINOS SUCESIVOS");
    printf("\n3:ENCONTRAR SUCESION A PARTIR DE EL ULTIMO TERMINO");
    printf("\n4: REGRESAR\n");
    scanf("%d",&op);
    switch(op){
        case 1:{
            recursiva();
            break;
        }
        case 2:{
            terminos_sucesivos();
            break;
        }
        case 3:{
            ultimo_termino();
            break;
        }
        case 4:{
            return;
        }
    }
    trabajar_sucesiones();
}

void ultimo_termino(){
    int x=0,t=0,bucle=0,i=0,r=0,cantidad=0;
    do{ bucle=0;
        fflush(stdin);
        printf("DEME EL ULTIMO TERMINO");
        x=scanf("%d",&t);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
    do{ bucle=0;
        fflush(stdin);
        printf("DEME LA CANTIDAD DE TERMINOS\n");
        x=scanf("%d",&cantidad);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
    do{ bucle=0;
        fflush(stdin);
        printf("DEME LA RAZON\n");
        x=scanf("%d",&r);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);

    int sucesion[cantidad];
    for(i=0;i<cantidad;i++){
        sucesion[i]=t-((cantidad-(i+1))*r);
    }
    imprimir_sucesion(sucesion,cantidad,r);
}

void terminos_sucesivos(){
    int t1=0,t2=0,r=0,suma=0,cantidad=0,x=0,i=0,a=0,bucle=0,pos=0,primer_termino=0;
     do{ bucle=0;
        fflush(stdin);
        printf("DEME LA POSICION DEL TERMINO");
        x=scanf("%d",&pos);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("DEME EL TERMINO");
        x=scanf("%d",&t1);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("DEME EL SIGUIENTE TERMINO");
        x=scanf("%d",&t2);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("ELIJA LA CANTIDAD DE ELEMENTOS\n");
        x=scanf("%d",&cantidad);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);


    //IMPRIMIR---------------------
    r=t2-t1;
    a=t1;
    primer_termino=t1;
    printf("LA SUCESION ES [ ");
    int ats[7];
    if(pos>1){
        ats[pos-1]=t1-r;
        for(i=pos-1;i>=1;i--){
            suma = suma+ats[i];
            ats[i-1]=ats[i]-r;
        }
        for(i=1;i<=pos-1;i++){
            printf(" %d ",ats[i]);
        }
        primer_termino=ats[1];
    }
    for(i=pos;i<=cantidad;i++){
        suma = suma+a;
        printf(" %d ",a);
        a=a+r;
    }
    printf(" ]");
    //ver si es par o impar--------------
    int im=0,imparcito=0;
    im=cantidad/2;
    im=im*2;
    if(im!=cantidad){
        impar(primer_termino,cantidad,r);
    }else{
        printf("\nLA SUMA = %d\n",suma);
    }
    printf("\n EL VALOR EQUIDISTANTE (%d) + (%d) = %d\n",primer_termino,(a-r),primer_termino+(a-r));
    system("pause");
}

void recursiva(){
    int termino=0,r=0,orden=0,bucle=0,x=0,cantidad=0;
    system("cls");
    do{ bucle = 0;
        if(termino==0){
            fflush(stdin);
            printf("INGRESE EL PRIMER TERMINO:\n");
            x=scanf("%d",&termino);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    do{bucle=0;
        if(r ==0){
            fflush(stdin);
            printf("INGRESE LA RAZON:\n");
            x=scanf("%d",&r);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    do{ bucle=0;
        if(cantidad == 0){
            fflush(stdin);
            printf("ELIJA LA CANTIDAD DE ELEMENTOS\n");
            x=scanf("%d",&cantidad);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    //si es impar---------
    int i=0,im=0;
    i=cantidad/2;
    i=i*2;
    if(i!=cantidad){
        im=1;
    }
    crear_sucesion(termino,cantidad,r,im);
}

void imprimir_sucesion(int sucesion[],int cantidad,int r){
    int i=0,suma=0;
    printf("\nLA SUCESION ES: [");
    for(i=0;i<cantidad;i++){
        printf(" %d ",sucesion[i]);
        suma=suma+sucesion[i];
    } printf("]");
    int im=0,imparcito=0;
    im=cantidad/2;
    im=im*2;
    if(im!=cantidad){
        impar(sucesion[0],cantidad,r);
    }else{
        printf("\nLA SUMA = %d\n",suma);
    }
    printf("\n EL VALOR EQUIDISTANTE %d + %d = %d\n",sucesion[0],sucesion[cantidad-1],sucesion[0]+sucesion[cantidad-1]);
    system("pause");
}

void impar(int termino,int cantidad,int r){
    int imp=0,a=0,v=0,tf=0;
    a=r*2;
    v=termino-a;
    tf=r*(cantidad+1)+v;
    imp = (termino+tf)/2;
    printf("\nEL TERMINO CENTRAL ES: [%d] \n",imp);
    printf("\nLA SUMA IMPAR ES: (%d * %d) = [%d]\n",imp,cantidad,imp*cantidad);
}

void crear_sucesion(int termino, int cantidad, int r){
    system("cls");
    int i=0,sucesion[cantidad],v=0;
    for(i=0;i<cantidad;i++){
        sucesion[i]=0;
    }
    for(i=0;i<cantidad;i++){
        sucesion[i]=r*(i+1);
        if(i==0){
            v=termino-sucesion[i];
        }
        sucesion[i]=sucesion[i]+v;
    }
    imprimir_sucesion(sucesion,cantidad,r);
}

void inicializar(){
    int i=0;
    for(i=0;i<10;i++){
        conjuntos[0].elementos[i]=0;
    }
    printf(" Para Iniciar Tiene Un Conjunto Vacio \n");
    system("pause");
}

void menu(){
    int desicion=0;
        system("cls");
        printf("1: CREAR UN NUEVO CONJUNTO\n");
        printf("2: INSERTAR DATOS \n");
        printf("3: OPERACIONES\n");
        printf("4: SALIR\n");
        fflush(stdin);
        scanf("%i",&desicion);
            switch (desicion)
            {
                case 1:{
                    crear();
                    break;
                }
                case 2:{
                    insertar();
                    break;
                }
                case 3:{
                    operaciones();
                    break;
                }

                case 4:{
                    return;
                }
            }
    menu();
}

void crear(){
    int s=0,queda=0,ac=0,anterior=0;
    if(t==5){
        printf("alcanzo el maximo de conjuntos");
        return;
    }else{
        queda = 5-t;
        do{
             printf("cuantos conjuntos utilizara, no mayor a %d : ",queda);
             fflush(stdin);
             s=scanf("%d",&ac);
             if(s==1 || ac>0){ //valida que es un numero
                 if(ac<queda){
                     t = t+ac;
                     conjuntos[t];
                     insertar();
                   }else{
                     printf("el valor se excede");
                    }
              }else{
                 printf("opcion no valida");
              }
          }while(s!=1 && (ac<queda));
    }
    return;
}

void insertar(){
    char a,d; int x=0,i=0,usado=0,nelem=0,e=0;bool ve;
    if(t>0){
        printf("\n Tiene %d Conjuntos --- Elija el conjunto a usar: ",t+1);
        fflush(stdin);
        x=scanf("%i",&e);
        e--;
        ve=verificar(x,e);
    }else{
        e=0;ve=true;
    }
    if(ve){
       //evaluar que el conjunto tiene datos------
        for(i=0;i<10;i++){
            if(conjuntos[e].elementos[i]!=0){
                 usado++;
            }
        }
        if(usado==9){
            printf(" El conjunto %d esta lleno ",e+1);
            return;
        }else{
            nelem = usado;
            //insertar-----------
         do{
           if(nelem<=8){
              int s=0;
              fflush(stdin);
              printf("\n Inserte el elemento: ");
              a=getchar();
              for(i=0;i<(nelem+1);i++){
                 if(a==conjuntos[e].elementos[i]){
                     s=1;
                 }
               }
               if(s==0){
                   conjuntos[e].elementos[nelem+1]=a;
                   nelem++;
               }
               fflush(stdin);
               printf("\n s Para agregar otro elemento: ");
               scanf("%c",&d);
            }else{
                printf("\nel conjunto esta lleno\n");
                system("pause");
                return;
           }
        }while(d==115);
      }

    }else{
        printf("\nlos numeros van desde el 1 hasta el %d\n",t+1);
        system("pause");
        insertar();
    }
    return;
}

void imprimir(){
    int i=0,s=0,tam=0,x=0;
    for(s=0;s<=t;s++){
      printf("\nCONJUNTOS %d:\n",s+1);
        for(i=1;i<sizeof(conjuntos[s].elementos);i++){
            if(conjuntos[s].elementos[i]!=0){
                printf(" %d: [%c]",i,conjuntos[s].elementos[i]);
            }else{
                break;
            }
        }
    }
}

void operaciones(){
    int desicion=0, i=0,car=0,c_universal=7;
    do{
        system("cls");
        imprimir();
        printf("\n\n****OPERACIONES DE CONJUNTOS***");
        printf("\n1:Escoger Universal");
        printf("\n2:Subconjutos");
        printf("\n3:Cardinalidad");
        printf("\n4:Conjunto Potencia");
        printf("\n5:Conjunto Disjunto y Conjunto Interseccion");
        printf("\n6:Union");
        printf("\n7:Diferencia Simetrica y Complemento Relativo");
        printf("\n8:Volver\n");
        fflush(stdin);
        i=scanf("%d", &desicion);
        if(i!=1){
            printf("valor invalido");
            system("pause");
        }else{
            if((desicion>=1) && (desicion<=8)){
                switch(desicion){
                    case 1:{
                            c_universal=conj_universal(c_universal);
                            break;
                        }
                    case 2:{
                        c_universal=repetido(4,c_universal);
                            break;
                        }
                    case 3:{
                        car = cardinales();
                            break;
                        }
                    case 4:{
                        conj_potencia(car);
                            break;
                        }
                    case 5:{
                        c_universal=repetido(1,c_universal);
                        break;
                    }
                    case 6:{
                        c_universal=repetido(2,c_universal);
                        break;
                    }
                    case 7:{
                        c_universal=repetido(3,c_universal);
                        break;
                    }
                    case 8:{
                        return;
                    }
                }
            }else{
                printf("\nvalor invalido");
                system("pause");
            }
        }
    }while(i!=3);
}

int conj_universal(int c_universal){
    int s=0, i=0; char x;
    bool ve;
    system("cls");
    if(c_universal!=7){
        fflush(stdin);
        printf("Usted ya tiene un conjunto UNIVERSAL %d\n",c_universal);
        printf("si desea cambiarlo oprima s\n");
        scanf("%c",&x);
        if(x!=115){
            return c_universal;
        }
    }
    imprimir();
    do{
        fflush(stdin);
        printf("\nElija un conjunto Universal: ");
        s=scanf("%d", &c_universal);
        c_universal--;
        ve=verificar(s,c_universal);
        if(ve){
            printf("\nEl conjunto universal es: ");
                for(i=0;i<10;i++){
                    printf("  [%c]",conjuntos[c_universal].elementos[i]);
                }
                printf("\n");system("pause");
        }else{
            printf("\nEse conjunto no existe\n");
            system("pause");
            //ve=0;
        }
  //}while(ve!=1);
    }while(!ve);
  return c_universal;
}

void sub_conjunto(int e, int a, int a2,int c_universal){
    int i=0,f=0,repite=0;
    for(i=0; i<a2; i++){
        for(f=0; f<a; f++){
            if(conjuntos[c_universal].elementos[i]==conjuntos[e].elementos[f]){
                repite++;
             }
         }
      }
      if(repite==a && repite==a2){
          printf("\nEl Conjunto %d es Subconjunto del Universal\n", e+1);
          system("pause");
       }else{
           if(repite==a && repite<a2){
                 printf("\nEl Conjunto %d es Subconjunto propio del Universal\n", e+1);
                 system("pause");
           }else{
              if(repite<a){
                  printf("\nEl Conjunto %d no es Subconjunto del Universal\n", e+1);
                  system("pause");
              }
           }
        }
}

int cardinales(){
    int x=0,i=0,car=0,e=0;
        system("cls");
        imprimir();
        fflush(stdin);
        printf("\n\nElija el conjunto\n");
        x=scanf("%i",&e);
        e--;
       if((x==1) && (e>=0 && e<=t)){
                for(i=0;i<10;i++){
                    if(conjuntos[e].elementos[i]!=0){
                        car++;
                    }else{
                        continue;
                    }
                }
                printf("la cardinal es 2^(%d)\n",car);
                system("pause");
        }else{
                printf("\nvalor invalido\n");
                system("pause");
                cardinales();
                return car-1;
            }
}

void conj_potencia(int car){
   car=cardinales();
   printf("aun nada");
}

int repetido(int cual,int c_universal){
    int bucle=0;
    do{ bucle=0;
        bool ve;
        int a=0,a2=0, x=0,i=0,e=0;
        if(c_universal==7){
            printf("\n Debe elegir un conjunto universal primero\n");
            system("pause");
            c_universal=conj_universal(c_universal);
        }
            if(t>=1){
                system("cls");
                imprimir();
                fflush(stdin);
                printf("\nEscoja un conjunto entre %d: ",t+1);
                x=scanf(" %d", &e);
                e--;
                ve=verificar(x,e);
                    if(!ve || (e == c_universal)){
                           printf("\nELIJIO EL MISMO CONJUNTO QUE EL UNIVERSAL O NO INSERTO UN VALOR CORRECTO\n");
                           system("pause");system("cls");
                           bucle=1;
                    }else{
                         for(i=0;i<10;i++){
                                if(conjuntos[e].elementos[i]!=0){
                                    a++;
                                }
                                if(conjuntos[c_universal].elementos[i]!=0){
                                    a2++;
                                }
                            }
                            //INICIA ENVIAR------------------
                                switch(cual){
                                    case 1:{
                                        disjunto(e,a,a2,c_universal);
                                        break;
                                    }
                                    case 2:{
                                        uniones(e,a,a2,c_universal);
                                        break;
                                    }
                                    case 3:{
                                        diferencia_sim(e,a,a2,c_universal);
                                        break;
                                    }
                                    case 4:{
                                        sub_conjunto(e,a,a2,c_universal);
                                    }
                                }

                            //FIN ENVIAR--------------------
                    }
        }else{
            printf("\nPara esta operacion necesita al menos dos conjuntos\n");
            system("pause");system("cls");
            crear();
            bucle=1;
        }
    }while(bucle==1);
    return c_universal;
}

void diferencia_sim(int e,int a, int a2,int c_universal){
    int i=0,f=0,repite=0,d=0,cr=0; char diferencia[20];
   for(i=0;i<20;i++){
      diferencia[i]=0;
    }
    for(i=1; i<=a; i++){
         for(f=1; f<=a2; f++){
              if(conjuntos[e].elementos[i]==conjuntos[c_universal].elementos[f]){
                    repite++;
              }
          }
          if(repite==0){
               diferencia[d]=conjuntos[e].elementos[i];
               d++;  cr++;
           }
           repite=0;
    }
    printf("\nComplemento Relativo %d - %d\n",e+1, c_universal+1);
    for(i=0;i<d;i++){
        printf(" [%c] ",diferencia[i]);
     }
     repite=0;
     for(i=1; i<=a2; i++){            //mismo codigo
        for(f=1; f<=a; f++){
             if(conjuntos[c_universal].elementos[i]==conjuntos[e].elementos[f]){
                  repite++;
              }
        }
        if(repite==0){
           diferencia[d]=conjuntos[c_universal].elementos[i];
           d++;
        }
        repite=0;
    }
    printf("\nComplemento Relativo %d - %d\n",c_universal+1,e+1);
    for(i=cr;i<d;i++){
        printf(" [%c] ",diferencia[i]);
     }                                    //fin mismo codigo
    printf("\ndiferencia simetrica\n");
   for(i=0;i<d;i++){
       printf(" [%c] ",diferencia[i]);
   }printf("\n");system("pause");
}

void disjunto(int e,int a, int a2, int c_universal){
    int i=0,f=0,repite=0;
    char interseccion[20];
    for(i=1; i<=a; i++){
        for(f=1; f<=a2; f++){
            if(conjuntos[e].elementos[i]==conjuntos[c_universal].elementos[f]){
                interseccion[repite]=conjuntos[e].elementos[i];
                repite++;
            }
        }
    }
    if(repite==0){
        printf("Los Conjuntos son DISJUNTOS\n");
        system("pause");
    }else{
        printf("Los Conjuntos Tienen INTERSECCION\n");
        for(i=0;i<repite;i++){
            printf("[%c]",interseccion[i]);
        }printf("\n");
        system("pause");
    }
}

void uniones(int e, int a, int a2,int c_universal){
    char uniones[20];
    int i=0,f=0,u=0,repite=0;
    for(i=0;i<20;i++){
        uniones[i]=0;
    }
    for(i=1; i<=a; i++){
        uniones[u]=conjuntos[e].elementos[i];
        u++;
    }
    for(f=1; f<=a2; f++){
        for(i=0;i<=a;i++){
            if(conjuntos[c_universal].elementos[f]==uniones[i]){
                repite++;
            }
        }
         if(repite==0){
              uniones[u]=conjuntos[c_universal].elementos[f];
              u++;
        }
          repite=0;
    }
    printf("\nla union es:\n");
    for(i=0;i<=u;i++){
        printf(" [%c] ",uniones[i]);
    }printf("\n");
    system("pause");
}

bool verificar(int z,int x){
    if(z==1 && ((x>=0)&&(x<=t))){ //cuando t=0 hay 1 conjunto
        return true;
    }else{
        return false;
    }
}







