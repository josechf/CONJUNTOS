#include<stdio.h>
#include <stdbool.h>
#include<math.h>
int t=0;
struct conj
{
    char elementos[10];
}conjuntos[0];

void menu();
void opcion(int);
//conjuntos-------
void crear();
void insertar();
void operaciones();
int conj_universal(int);
void imprimir();
void conj_potencia();
void inicializar();
int repetido(int,int,bool);
void uniones(int,int);
void disjunto(int,int);
void diferencia_sim(int,int);
void sub_conjunto(int,int);
int pedir_conjunto();
void eliminar();
void posicion(int,int,int[]);
void no_repetir_elementos(int,int);
//sucesiones ------------
void trabajar_sucesiones();
void crear_sucesion();
void impar();
void recursiva();
void terminos_sucesivos();
void ultimo_termino();
void imprimir_sucesion(int [],int,int);
//relaciones------------------
void relaciones();
void cartesiano(int,int);
void matriz_adyacente(int,int);
void crear_matriz_con_relacion(int,int,char[][2],int);
void imprimir_matriz_ad(int,int,int [][10]);
void imprimir_relacion(int,int);
int crear_relacion(int,int,bool);
int tamanio(int);
void propiedades(int,int,char[][2],int);
//funcion----------------------
void tipo_funcion(int,int,char[][2]);
void pedir_funcion();

void main(){
    int c=0;//variable de control para la inicializacion del conjunto[0]
    opcion(c);
}

void opcion(int c){
    char op=0;
    system("cls"); fflush(stdin);
    printf("   ====================\n");
    printf("   =   LABORATORIO    =\n");
    printf("   ====================");
    printf("\n\n  1:[___CONJUNTOS__________]\n");
    printf("\n  2:[___SUCESIONES_________]\n");
    printf("\n  3:[___RELACIONES_________]\n");
    printf("\n  4:[___FINALIZAR PROGRAMA_]\n");
    op=getche();
        switch(op){
            case '1':{
                if(c==0){
                    inicializar();
                }
                menu();
                break;
            }
            case '2':{
                trabajar_sucesiones();
                break;
            }
            case '3':{
                relaciones();c++;
                break;
            }
            case '4':{
                return;
            }
        }
    opcion(c);
}

// RELACIONES --------------------------------------------------------------------------

void relaciones(){
    int ele=0,c_uni=7;
    system("cls");
    printf("   ====================\n");
    printf("   =      RELACIONES  =\n");
    printf("   ====================\n");
    printf("\n  1:[___PRODUCTO CARTESIANA_]\n");//relacion total
    printf("\n  2:[___MATRIZ ADYACENTE____]\n");
    printf("\n  3:[___CREAR RELACION______]\n");
    printf("\n  4:[___FUNCION A PARTIR DE CONJUNTOS_]\n");
    printf("\n  5:[___FUNCION DE CERO_____]\n");
    printf("\n  6:[___VOLVER______________]\n");
    scanf("%d",&ele);
    switch(ele){
        case 1:{
            c_uni=repetido(5,c_uni,true);
            break;
        }
        case 2:{
            c_uni=repetido(6,c_uni,true);
            break;
        }
        case 3:{
            c_uni=repetido(7,c_uni,true);
            break;
        }
        case 4:{
            c_uni=repetido(8,c_uni,true);
            break;
        }
        case 5:{
            pedir_funcion();
            break;
        }
        case 6:{
            return;
        }
    }
    relaciones();
}

void imprimir_relacion(int A,int B){
    int i=1;
    do{
        printf("\n-CONJUNTOS %d:\n",A+1);
        for(i=1;i<=tamanio(A);i++){
             printf(" %d: [%c]",i,conjuntos[A].elementos[i]);
        }
        A=B;
        B=0;
    }while(A!=0);printf("\n");
}

int tamanio(int A){
    int max1=1;
    while(conjuntos[A].elementos[max1]!=0){
        max1++;
    }
    return max1-1;
}

void cartesiano(int A,int B){
    int x=1,i=1;
    system("cls");
    printf("\n\nEL PRODUCTO CARTESIANO DE: ");
    imprimir_relacion(A,B);
    printf("ES\n[ ");
    for(i=1;i<=tamanio(A);i++){
        for(x=1;x<=tamanio(B);x++){
            printf("(%c,%c)",conjuntos[A].elementos[i],conjuntos[B].elementos[x]);
        }
    }
    printf(" ]");getch();
}

int crear_relacion(int A,int B,bool funcion){
    int x1=0,x2=0,pares=tamanio(A),max1=1,max2=1,i=0;
    max1=tamanio(A);
    max2=tamanio(B);
    max1=((max2*2)*max1)+max1;//calcula el maximo posible de pares ordenados, max1 y 2 se reutilizaran
        if(!funcion){
            do{
                max2=0;fflush(stdin);
                printf("PARES ORDENADOS:");
                max2=scanf("%d",&pares);
                if(pares>max1){
                    printf("\nSOLO SE ACEPTAN %d PARES ORDENADOS\n",max1);getch();system("cls");
                }
            }while(max2!=1||pares>max1);
        }
        char R[pares][2];
        for(x1=0;x1<pares;x1++){
            for(x2=0;x2<2;x2++){
                fflush(stdin);
                printf("\nPAR [%d][%d]: ",x1,x2);
                scanf("%c",&R[x1][x2]);
            }
        }
        max1=A;
        max2=B;
    do{ //REVISA SI LA RELACION ES POSIBLE--------------------------------
        for(x1=0;x1<pares;x1++){
            for(x2=1;x2<=tamanio(max1);x2++){
                if(R[x1][i]==conjuntos[max1].elementos[x2]){
                    break;
                }
            }
            if(conjuntos[max1].elementos[x2]==0){
                system("cls");
                if(i==0){// i es para saber si es el conjunto A o el B, en este caso la columna cero o uno
                    printf("RELACION INVALIDA POR EL PAR ([%c],%c)\n",R[x1][0],R[x1][1]);
                    getch();return 1;
                }else{
                    printf("RELACION INVALIDA POR EL PAR (%c,[%c])\n",R[x1][0],R[x1][1]);
                    getch();return 1;
                }
            }
        }
        max1=max2;max2=-1;i=1;
    }while(max1!=-1);
    // VER SI ES UNA FUNCION----------------------------------------------------------------------------------
    if(funcion){
        if(verifica_repeticiones(pares,R,0)==-1){
            printf("\nUN ELEMENTO DEL DOMINIO TIENE MAS DE UNA ASOCIACION");getch();
            return 0;
        }
        system("cls");
        tipo_funcion(A,B,R);
        return 0;
    }
    // FIN SI ES UNA FUNCION----------------------------------------------------------------------------------
    system("cls");
    for(x1=0;x1<pares;x1++){
        printf("(");
        for(x2=0;x2<2;x2++){
            printf("%c",R[x1][x2]);if(x2==0){printf(",");}
        }
        printf(")");if(x1<(pares-1)){printf(",");}
    }
    printf("\n");
    crear_matriz_con_relacion(A,B,R,pares);
    propiedades(A,B,R,pares);
    return 0;
}

void propiedades(int A,int B,char R[][2],int pares){
    //reflexiva------------
    int i=0,x=0,a=0,z=0,d=0;
    char aux[2];
    for(i=0;i<pares;i++){
        if(R[i][0]==R[i][1]){
            d++;
        }
    }
    i=tamanio(A);
    if(d==i){
        printf("\n\n===================================");
        printf("\nES REFLEXIVA\n");
    }
    if(d==0){
        printf("\n\n===================================");
        printf("\nES IRREFLEXIVA\n");
    }
    //SIMETRICA-------------
    for(i=0;i<pares;i++){ //{(1,2)(2,1)}
        a=0;
        for(x=0;x<pares;x++){
            if(i==x){
                continue;
            }else{
                if(R[i][0]==R[x][1] && R[i][1]==R[x][0]){
                        z++;a=1;
                }
            }
        }
        if((z!=0 && a==0) && R[i][0]!=R[i][1]){ //si al menos un par ordenado no es simetrico entonces la relacion no es simetrica
            z--;printf("z=%d",z);
        }
    }
    if((z+d)==pares){
        printf("\n\n===================================\n");
        printf("SIMETRICA\n");
    }else{
        if(z==0 && d==0){
            printf("\n\n===================================");
            printf("\nASIMETRICA\n");
        }
        if(z==0){
            printf("\n\n===================================");
            printf("\nANTISIMETRICA\n");
        }
    }

   //TRANSITIVA---------------------------------------------------------
   z=0;d=0;
        for(i=0;i<pares;i++){
            for(x=0;x<pares;x++){
                if(x!=i && R[i][1]==R[x][0]){
                    d++;
                    aux[0]=R[i][0];
                    aux[1]=R[x][1];
                    for(a=0;a<pares;a++){
                        if(aux[0]==R[a][0]){
                            if(aux[1]==R[a][1]){
                                z++;
                            }
                        }
                    }
                }
            }
        }
    if(z==d){
        printf("\n\n===================================\n");
        printf("TRANSITIVA\n");
    }
    getch();
}

void crear_matriz_con_relacion(int A,int B,char R[][2],int pares){
    int i=0,x=0,bit=0,c=0;
    int matriz_ady[tamanio(A)][tamanio(B)];
    for(i=0;i<tamanio(A);i++){
        for(x=0;x<tamanio(B);x++){
            matriz_ady[i][x]=0;
        }
    }
      for(i=1;i<=tamanio(A);i++){
        for(x=0;x<pares;x++){
            if(conjuntos[A].elementos[i] == R[x][0]){
                for(c=1;c<=tamanio(B);c++){
                    if(conjuntos[B].elementos[c]==R[x][1]){
                        matriz_ady[i-1][c-1]=1;
                        break;
                    }
                }
            }
        }
    }
    imprimir_matriz_ad(A,B,matriz_ady);
    getch();
}

void matriz_adyacente(int A,int B){
    int i=0,x=0,bit=0,c=0;
    int matriz_ady[tamanio(A)][tamanio(B)];
    for(i=0;i<tamanio(A);i++){
        for(x=0;x<tamanio(B);x++){
            matriz_ady[i][x]=0;
        }
    }
    for(i=1;i<=tamanio(A);i++){
        for(x=1;x<=tamanio(B);x++){
            system("cls");
            imprimir_matriz_ad(A,B,matriz_ady);
            printf("\n[%d][%d]",i-1,x-1);
            fflush(stdin);
            c=scanf("%d",&bit);
            if(c==1 && (bit==1 || bit==0)){
                matriz_ady[i-1][x-1]=bit;
            }else{
                x--;c=0;
            }
        }
    }
    system("cls");
    imprimir_matriz_ad(A,B,matriz_ady);
    printf("\n");
    printf("RELACION: [");
    char Ra[tamanio(A)][2];int z=0;
    for(i=1;i<=tamanio(A);i++){
        for(x=1;x<=tamanio(B);x++){
            if(matriz_ady[i-1][x-1]==1){
                printf("(%c,%c)",conjuntos[A].elementos[i],conjuntos[B].elementos[x]);
                Ra[z][0]=conjuntos[A].elementos[i];
                Ra[z][1]=conjuntos[B].elementos[x];
                z++;
            }
        }
    }

    printf("]\n");
    propiedades(A,B,Ra,z);
}

void imprimir_matriz_ad(int A,int B,int matriz_ady[][tamanio(B)]){
    printf("\n  =====================");
    printf("\n  = MATRIZ ADYACENTE =\n ");
    printf(" =====================\n");
    int i=0,x=0;
    for(i=1;i<=tamanio(B);i++){
        printf("   %c",conjuntos[B].elementos[i]); //ES LA COLUMNA DE ARRIBA, SE COLOCA ANTES DE TODA LA MATRIZ
    }
    for(i=1;i<=tamanio(A);i++){
        printf("\n%c",conjuntos[A].elementos[i]);//SE IMPRIME COMO FINA, UN ELEMENTO DE AQUI Y LA PRIMERA FILA DE LA MATRIZ
        for(x=0;x<tamanio(B);x++){
            printf("  %d",matriz_ady[i-1][x]); //SE IMPRIME UNA FINA AL LADO DEL ELEMENTO DEL CONJUNTO A
        }
    }
}
//FUNCIONES-------------------------------------------------------------------------------

void tipo_funcion(int A,int B,char R[][2]){
    int i=0,x=0,c=0,sup=0;
    printf("  ============\n");
    printf("  = FUNCIONE =\n");
    printf("  ============\n");
    //INYECTIVA-----A<=B----------------------------------------------------------
    c=verifica_repeticiones(tamanio(A),R,1);
    if(c==1){
        printf("\nINYECTIVA\n============================================");
    }
    //SUPRAYECTIVA------A>=B--------------------------------------------------------
    for(i=0;i<tamanio(A);i++){
        for(x=i+1;x<tamanio(A);x++){
            if(R[i][1]==R[x][1]){
                break;
            }
        }
        if((x==tamanio(A))||(i==tamanio(A)-1)){
            sup++;
        }
    }
    if(sup==tamanio(B)){
        printf("\nSUPRAYECTIVA\n============================================");
    }
    //BIYECTIVA-------------A==B-------------------------------------------------
    if(c==1 && sup==tamanio(B)){
        printf("\nES BIYECTUVA\n============================================");
    }
   //DIAGRAMA---------------------------------------------------
    printf("\n");
    crear_matriz_con_relacion(A,B,R,tamanio(A));
    getch();
}

void pedir_funcion(){
    int i=0,dom=0,x2=0,z=0;
    do{
        fflush(stdin);
        printf("CANTIDAD DE DOMINIOS");
        i=scanf("%d",&dom);
    }while(i!=1&&dom>=10);
    char R[dom][2];
    for(i=0;i<dom;i++){
        for(x2=0;x2<2;x2++){
            fflush(stdin);
            printf("\nPAR [%d][%d]: ",i,x2);
            scanf("%c",&R[i][x2]);
        }
    }
    if(verifica_repeticiones(dom,R,0)==-1){
        printf("\nUN ELEMENTO DEL DOMINIO TIENE MAS DE UNA ASOCIACION");getch();
        return 0;
    }
    if(tamanio(t)!=0){ //para llenar desde el conjunto[0]----------
        t=t+2;
    }else{
        t++;
    }
    for(i=0;i<dom;i++){
        conjuntos[t-1].elementos[i+1]=R[i][0];
        conjuntos[t].elementos[i+1]=R[i][1];
    }
    no_repetir_elementos(dom,t);
    imprimir_relacion(t-1,t);
    tipo_funcion(t-1,t,R);
}
// SUCESIONES ---------------------------------------------------------------------------

void trabajar_sucesiones(){
    int op=0;
    system("cls"); fflush(stdin);
    printf("   ====================\n");
    printf("   =     SUCESIONES   =\n");
    printf("   ====================\n");
    printf("  1: -- FORMULAS RECURSIVAS --");
    printf("\n  2: -- TERMINOS SUCESIVOS --");
    printf("\n  3: -- ENCONTRAR SUCESION A PARTIR DE EL ULTIMO TERMINO --");
    printf("\n  4: -- REGRESAR --\n");
    scanf("%d",&op);
    switch(op){
        case 1:{
            recursiva();
            break;
        }
        case 2:{
            terminos_sucesivos();
            break;
        }
        case 3:{
            ultimo_termino();
            break;
        }
        case 4:{
            return;
        }
    }
    trabajar_sucesiones();
}

void ultimo_termino(){
    int x=0,t=0,bucle=0,i=0,r=0,cantidad=0;
    do{ bucle=0;
        fflush(stdin);
        printf("DEME EL ULTIMO TERMINO");
        x=scanf("%d",&t);
        if(x!=1){
            printf("VALOR INVALIDO");getch();system("cls");bucle=1;
        }
    }while(bucle==1);
    do{ bucle=0;
        fflush(stdin);
        printf("DEME LA CANTIDAD DE TERMINOS\n");
        x=scanf("%d",&cantidad);
        if(x!=1){
            printf("VALOR INVALIDO");getch();system("cls");bucle=1;
        }
    }while(bucle==1);
    do{ bucle=0;
        fflush(stdin);
        printf("DEME LA RAZON\n");
        x=scanf("%d",&r);
        if(x!=1){
            printf("VALOR INVALIDO");getch();system("cls");bucle=1;
        }
    }while(bucle==1);

    int sucesion[cantidad];
    for(i=0;i<cantidad;i++){
        sucesion[i]=t-((cantidad-(i+1))*r);
    }
    imprimir_sucesion(sucesion,cantidad,r);
}

void terminos_sucesivos(){
    int t1=0,t2=0,r=0,suma=0,cantidad=0,x=0,i=0,a=0,bucle=0,pos=0,primer_termino=0;
     do{ bucle=0;
        fflush(stdin);
        printf("DEME LA POSICION DEL TERMINO");
        x=scanf("%d",&pos);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("DEME EL TERMINO");
        x=scanf("%d",&t1);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("DEME EL SIGUIENTE TERMINO");
        x=scanf("%d",&t2);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);
     do{ bucle=0;
        fflush(stdin);
        printf("ELIJA LA CANTIDAD DE ELEMENTOS\n");
        x=scanf("%d",&cantidad);
        if(x!=1){
            printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
        }
    }while(bucle==1);


    //IMPRIMIR---------------------
    r=t2-t1;
    a=t1;
    primer_termino=t1;
    printf("LA SUCESION ES [ ");
    int ats[7];
    if(pos>1){
        ats[pos-1]=t1-r;
        for(i=pos-1;i>=1;i--){
            suma = suma+ats[i];
            ats[i-1]=ats[i]-r;
        }
        for(i=1;i<=pos-1;i++){
            printf(" %d ",ats[i]);
        }
        primer_termino=ats[1];
    }
    for(i=pos;i<=cantidad;i++){
        suma = suma+a;
        printf(" %d ",a);
        a=a+r;
    }
    printf(" ]");
    //ver si es par o impar--------------
    int im=0,imparcito=0;
    im=cantidad/2;
    im=im*2;
    if(im!=cantidad){
        impar(primer_termino,cantidad,r);
    }else{
        printf("\nLA SUMA = %d\n",suma);
    }
    printf("\n EL VALOR EQUIDISTANTE (%d) + (%d) = %d",primer_termino,(a-r),primer_termino+(a-r));
    getch();
}

void recursiva(){
    int termino=0,r=0,orden=0,bucle=0,x=0,cantidad=0;
    system("cls");
    do{ bucle = 0;
        if(termino==0){
            fflush(stdin);
            printf("INGRESE EL PRIMER TERMINO:\n");
            x=scanf("%d",&termino);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    do{bucle=0;
        if(r ==0){
            fflush(stdin);
            printf("INGRESE LA RAZON:\n");
            x=scanf("%d",&r);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    do{ bucle=0;
        if(cantidad == 0){
            fflush(stdin);
            printf("ELIJA LA CANTIDAD DE ELEMENTOS\n");
            x=scanf("%d",&cantidad);
            if(x!=1){
                printf("VALOR INVALIDO\n");system("pause");system("cls");bucle=1;
            }
        }
    }while(bucle == 1);
    //si es impar---------
    int i=0,im=0;
    i=cantidad/2;
    i=i*2;
    if(i!=cantidad){
        im=1;
    }
    crear_sucesion(termino,cantidad,r,im);
}

void imprimir_sucesion(int sucesion[],int cantidad,int r){
    int i=0,suma=0;
    printf("\nLA SUCESION ES: [");
    for(i=0;i<cantidad;i++){
        printf(" %d ",sucesion[i]);
        suma=suma+sucesion[i];
    } printf("]");
    int im=0,imparcito=0;
    im=cantidad/2;
    im=im*2;
    if(im!=cantidad){
        impar(sucesion[0],cantidad,r);
    }else{
        printf("\nLA SUMA = %d\n",suma);
    }
    printf("\n EL VALOR EQUIDISTANTE %d + %d = %d",sucesion[0],sucesion[cantidad-1],sucesion[0]+sucesion[cantidad-1]);
    getch();
}

void impar(int termino,int cantidad,int r){
    int imp=0,a=0,v=0,tf=0;
    a=r*2;
    v=termino-a;
    tf=r*(cantidad+1)+v;
    imp = (termino+tf)/2;
    printf("\nEL TERMINO CENTRAL ES: [%d] \n",imp);
    printf("\nLA SUMA IMPAR ES: (%d * %d) = [%d]\n",imp,cantidad,imp*cantidad);
}

void crear_sucesion(int termino, int cantidad, int r){
    system("cls");
    int i=0,sucesion[cantidad],v=0;
    for(i=0;i<cantidad;i++){
        sucesion[i]=0;
    }
    for(i=0;i<cantidad;i++){
        sucesion[i]=r*(i+1);
        if(i==0){
            v=termino-sucesion[i];
        }
        sucesion[i]=sucesion[i]+v;
    }
    imprimir_sucesion(sucesion,cantidad,r);
}

// CONJUNTOS --------------------------------------------------------------------------

void inicializar(){
    int i=0;
    for(i=0;i<10;i++){
        conjuntos[0].elementos[i]=0;
    }
    printf("[ Para Iniciar Tiene Un Conjunto Vacio ]");
    getch();
}

void menu(){
    int desicion=0;
        system("cls");
        printf("   ====================\n");
        printf("   =     CONJUNTOS    =\n");
        printf("   ====================\n");
        printf("  1: -- CREAR UN NUEVO CONJUNTO --\n");
        printf("  2: -- INSERTAR DATOS --\n");
        printf("  3: -- OPERACIONES --\n");
        printf("  4: -- ELIMINAR --\n");
        printf("  5: -- SALIR --\n");
        fflush(stdin);
        scanf("%i",&desicion);
            switch (desicion)
            {
                case 1:{
                    crear();
                    break;
                }
                case 2:{
                    insertar();
                    break;
                }
                case 3:{
                    operaciones();
                    break;
                }
                case 4:{
                    eliminar();
                    break;
                }
                case 5:{
                    return;
                }
            }
    menu();
}

void crear(){
    int s=0,queda=0,ac=0,anterior=0;
    if(t==5){
        printf("alcanzo el maximo de conjuntos");
        return;
    }else{
        queda = 5-t;
        do{
             printf("cuantos conjuntos utilizara, no mayor a %d : ",queda);
             fflush(stdin);
             s=scanf("%d",&ac);
             if(s==1 || ac>0){ //valida que es un numero
                 if(ac<queda){
                     t = t+ac;
                     conjuntos[t];
                     insertar();
                   }else{
                     printf("el valor se excede");
                    }
              }else{
                 printf("opcion no valida");
              }
          }while(s!=1 && (ac<queda));
    }
    return;
}

void insertar(){
    char a,d; int x=0,i=0,nelem=1,e=0;
    e=pedir_conjunto();
    if(tamanio(e)!=0){
        nelem=tamanio(e)+1;
    }
        if(nelem==9){
            printf(" El conjunto %d esta lleno ",e+1);
            return;
        }else{
            //insertar-----------
         do{
           if(nelem<=8){
               int s=0;
               fflush(stdin);
               printf("\n Inserte el elemento: ");
               conjuntos[e].elementos[nelem]=getchar();
               nelem++;
               fflush(stdin);
               printf("\n |s| Para agregar otro elemento: ");
               scanf("%c",&d);
            }else{
                printf("\nel conjunto esta lleno");
                getch();
                return;
           }
        }while(d==115);
        no_repetir_elementos(nelem,e);
      }
    return;
}

void imprimir(){
    int s=0,i=0;
    for(s=0;s<=t;s++){
      printf("\nCONJUNTOS %d:\n 0: [%c]",s+1,157);
        for(i=1;i<=tamanio(s);i++){
            printf(" %d: [%c]",i,conjuntos[s].elementos[i]);
        }
    }
}

void operaciones(){
    int desicion=0, i=0,c_universal=7;
    do{
        system("cls");
        imprimir();
        printf("    \n    ============================\n");
        printf("    = OPERACIONES DE CONJUNTOS =\n");
        printf("    ============================\n");
        printf("\n  1:[___Escoger Universal___________________________]");
        printf("\n  2:[___Subconjutos_________________________________]");
        printf("\n  3:[___Conjunto Potencia___________________________]");
        printf("\n  4:[___Conjunto Disjunto y Conjunto Interseccion___]");
        printf("\n  5:[___Union_______________________________________]");
        printf("\n  6:[___Diferencia Simetrica y Complemento Relativo_]");
        printf("\n  7:[___Volver______________________________________]\n");
        fflush(stdin);
        i=scanf("%d", &desicion);
        if(i!=1){
            printf("valor invalido");
            system("pause");
        }else{
            if((desicion>=1) && (desicion<=7)){
                switch(desicion){
                    case 1:{
                            c_universal=conj_universal(c_universal);
                            break;
                        }
                    case 2:{
                        c_universal=repetido(4,c_universal,false);
                            break;
                        }
                    case 3:{
                            int e=pedir_conjunto();
                            conj_potencia(e);
                            break;
                        }
                    case 4:{
                        c_universal=repetido(1,c_universal,false);
                        break;
                    }
                    case 5:{
                        c_universal=repetido(2,c_universal,false);
                        break;
                    }
                    case 6:{
                        c_universal=repetido(3,c_universal,false);
                        break;
                    }
                    case 7:{
                        return;
                    }
                }
            }else{
                printf("\nvalor invalido");
                getch();
            }
        }
    }while(i!=3);
}

int conj_universal(int c_universal){
    int s=0, i=0; char x;
    bool ve;
    system("cls");
    if(c_universal!=7){
        fflush(stdin);
        printf("Usted ya tiene un conjunto UNIVERSAL %d\n",c_universal);
        printf("si desea cambiarlo oprima |s|\n");
        scanf("%c",&x);
        if(x!=115){
            return c_universal;
        }
    }
    imprimir();
    fflush(stdin);
    c_universal=pedir_conjunto();
    if(tamanio(c_universal)==0){
        printf("\nEL CONJUNTO ESTA VACIO\n");getch();
        insertar();
    }
    printf("\nEl conjunto universal es: ");
    printf("[%c]",157);
    for(i=1;i<=tamanio(c_universal);i++){
        printf("  [%c]",conjuntos[c_universal].elementos[i]);
    }
    printf("\n");getch();
    return c_universal;
}

void sub_conjunto(int e,int c_universal){
    int i=0,pos[10];
    for(i=0;i<10;i++){
        pos[i]=0;
    }
    posicion(c_universal,e,pos);
    i=0;
    while(pos[i]!=0){
        i++;
    }
      if(i==tamanio(e) && i==tamanio(c_universal)){
          printf("\nEl Conjunto %d es Subconjunto del Universal\n", e+1);
          getch();
       }else{
           if(i==tamanio(e) && i<tamanio(c_universal)){
                 printf("\nEl Conjunto %d es Subconjunto propio del Universal\n", e+1);
                 getch();
           }else{
              if(i<tamanio(e)){
                  printf("\nEl Conjunto %d no es Subconjunto del Universal\n", e+1);
                  getch();
              }
           }
        }
}

void conj_potencia(int e){
    int bin1=0,bin2=0,k=0;
    printf("\nEL CONJUNTO POTENCIA ES: \n");
    int tam=pow(2,tamanio(e)); //2^tamanio(e)
    printf("{%c}",157);
    for(bin1=1;bin1<tam;bin1++){
        printf("{");
        for(bin2=0;bin2<tamanio(e);bin2++){
            k=pow(2,bin2); //2^bin2
            if((bin1 & bin2)>0){
                printf("%c,",conjuntos[e].elementos[bin2]);
            }
        }
        printf("%c}",8);
    }
    getch();
}

int repetido(int cual,int c_universal,bool relacion){
    int bucle=0;
    do{ bucle=0;
        int x=0,i=0,e=0;
        if(c_universal==7){
            printf("\n -- Debe elegir un conjunto universal primero --\n");
            getch();
            c_universal=conj_universal(c_universal);
        }
            if(t>=1){
                system("cls");
                imprimir();
                fflush(stdin);
                e=pedir_conjunto();
                    if((e == c_universal)&&(!relacion)){
                           printf("\n// ELIJIO EL MISMO CONJUNTO QUE EL UNIVERSAL \\ \n");
                           getch();system("cls");
                           bucle=1;
                    }else{
                            //INICIA ENVIAR------------------
                                switch(cual){
                                    case 1:{
                                        disjunto(e,c_universal);
                                        break;
                                    }
                                    case 2:{
                                        uniones(e,c_universal);
                                        break;
                                    }
                                    case 3:{
                                        diferencia_sim(e,c_universal);
                                        break;
                                    }
                                    case 4:{
                                        sub_conjunto(e,c_universal);
                                        break;
                                    }
                                    case 5:{
                                        cartesiano(c_universal,e);
                                        break;
                                    }
                                    case 6:{
                                        matriz_adyacente(c_universal,e);
                                        break;
                                    }
                                    case 7:{
                                        crear_relacion(c_universal,e,false);//propiedades de relacion
                                        break;
                                    }
                                    case 8:{
                                        crear_relacion(c_universal,e,true);//propiedades de funcion
                                        break;
                                    }
                                }
                    }
        }else{
            printf("\n [Para esta operacion necesita al menos dos conjuntos]\n");
            getch();system("cls");
            crear();
            bucle=1;
        }
    }while(bucle==1);
    return c_universal;
}

void diferencia_sim(int e,int c_universal){
    int i=0,f=0,u=0,cr=0,pos[10]; char diferencia[20];
   for(i=0;i<20;i++){
        if(i<=10){
            pos[i]=0;
        }
        diferencia[i]=0;
    }
    posicion(e,c_universal,pos);
    for(i=1;i<=tamanio(e);i++){
        if(pos[u]==i){
            u++;
        }else{
            diferencia[f]=conjuntos[e].elementos[i];f++;
        }
    }
    printf("\nComplemento Relativo %d - %d\n",e+1, c_universal+1);
    for(i=0;i<=f;i++){
        printf(" [%c] ",diferencia[i]);
     }

    u=0;cr=f;//AL REVES ------------
    posicion(c_universal,e,pos);
    for(i=1;i<=tamanio(c_universal);i++){
        if(pos[u]==i){
            u++;
        }else{
            diferencia[f]=conjuntos[c_universal].elementos[i];f++;
        }
    }
    printf("\nComplemento Relativo %d - %d\n",c_universal+1,e+1);
    for(i=cr;i<=f;i++){
        printf(" [%c] ",diferencia[i]);
     }                                    //fin mismo codigo
    printf("\ndiferencia simetrica\n");
   for(i=0;i<f;i++){
       printf(" [%c] ",diferencia[i]);
   }getch();
}

void disjunto(int e,int c_universal){
    int i=0,f=0,pos[10];
    char interseccion[20];
    for(i=0;i<10;i++){
        if(i<=10){
            pos[i]=0;
        }
        interseccion[i]=0;
    }
    posicion(e,c_universal,pos);
    i=0;
    while(pos[i]!=0){
        interseccion[i]=conjuntos[e].elementos[pos[i]];
        i++;
    }
    if(i==0){
        printf("Los Conjuntos son DISJUNTOS\n");
        getch();
    }else{
        printf("Los Conjuntos Tienen INTERSECCION\n");
        for(f=0;f<i;f++){
            printf("[%c]",interseccion[f]);
        }
        getch();
    }
}

void uniones(int e,int c_universal){
    char uniones[20];
    int i=0,f=0,u=tamanio(e),pos[10];
    for(i=0;i<20;i++){
        uniones[i]=0;
        if(i<=10){
            pos[i]=0;
        }
    }
    for(i=0; i<=tamanio(e); i++){
        uniones[i]=conjuntos[e].elementos[i+1];
    }
    posicion(c_universal,e,pos);
    for(f=1;f<=tamanio(c_universal);f++){
        if(pos[u]!=f){
            uniones[i]=conjuntos[c_universal].elementos[f];i++;u++;
        }
    }
    printf("\nla union es:\n");
    for(i=0;i<=sizeof(uniones);i++){
        if(uniones[i]!=0){
            printf(" [%c] ",uniones[i]);
        }
    }
    getch();
}

int pedir_conjunto(){
    int ve=0,x=0,e=0;
    if(t<1){
        e=0;
        return e;
    }else{
        printf("\n Tiene %d Conjuntos --- Elija el conjunto a usar: ",t+1);
        fflush(stdin);
        x=scanf("%i",&e);
        e--;
        if(x==1 && (e>=0)&&(e<=t)){
            return e;
        }else{
            printf("\nlos numeros van desde el 1 hasta el %d\n",t+1);
            getch();system("cls");
            e=pedir_conjunto();
            return e;
        }
    }
}

void eliminar(){
    if(tamanio(t)<1){ //si no hay conjuntos entonces retorna
        return;
    }
    char ele;
    printf("\nCONJUNTO EN EL QUE SE REALIZARA LA ACCION\n");
    int op=0,e=0,i=0,z=0,tam=0;
    e=pedir_conjunto();
    do{
        fflush(stdin);
        printf("\n  1.[___/ELEMENTO/___]");
        printf("\n  2.[___/CONJUNTO/___]\n");
        scanf("%d",&op);
    }while(op>2||op<1);
    switch(op){
        case 1:{
            imprimir_relacion(e,0);
            fflush(stdin);
            printf("/nESCOJA EL ELEMENTO\n");
            scanf("%c",&ele);
            tam=tamanio(e);
            for(i=1;i<=tam;i++){
                if(ele==conjuntos[e].elementos[i]){
                    conjuntos[e].elementos[i]=0;
                    for(z=i;z<=tam;z++){
                        if(conjuntos[e].elementos[z+1]!=0){
                            conjuntos[e].elementos[z]=conjuntos[e].elementos[z+1];
                        }else{
                            conjuntos[e].elementos[z]=0;
                        }
                    }break;
                }
            }
            break;
        }
        case 2:{

                for(i=1;i<=tamanio(e);i++){
                    conjuntos[e].elementos[i]=0;
                }
                for(i=e;i<=t;i++){
                    for(z=1;z<=tamanio(i+1);z++){
                         if(i==t){
                            conjuntos[i].elementos[z]=0;
                         }else{
                            conjuntos[i].elementos[z]=conjuntos[i+1].elementos[z];
                         }
                    }
                }
                t--;
            break;
        }
    }
}

void no_repetir_elementos(int dom,int e){
    int x2=0,i=0,z=0;
    for(x2=1;x2<=dom;x2++){
        for(i=x2+1;i<=dom;i++){
            if(conjuntos[e].elementos[x2]==conjuntos[e].elementos[i]){
                conjuntos[e].elementos[i]=0;
                for(z=i;z<=dom;z++){
                    if(conjuntos[e].elementos[z+1]!=0){
                        conjuntos[e].elementos[z]=conjuntos[t].elementos[z+1];
                    }else{
                        conjuntos[e].elementos[z]=0;
                    }
                }
            }
        }
    }
}

void posicion(int A,int B,int pos[]){
    int i=0,z=0,u=0;
    for(i=1;i<=tamanio(A);i++){
        for(z=1;z<=tamanio(B);z++){
            if(conjuntos[A].elementos[i]==conjuntos[B].elementos[z]){
                pos[u]=i;u++;
            }
        }
    }
}

int verifica_repeticiones(int pares,char R[][2],int i){
    int x2=0,x1=0,max2=0;
    for(x2=0;x2<pares-1;x2++){
        for(x1=0;x1<pares;x1++){
            if(R[x2][i]==R[x1][i]&&x2!=x1){
                max2=2;
            }
        }
        if(max2==2){
            return -1;
        }
    }
    return 1;
}













